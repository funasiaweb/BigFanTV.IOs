// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios11.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MuviPlayer
import AVFoundation
import AVKit
import CoreMedia
import Foundation
import MediaPlayer
@_exported import MuviPlayer
import ObjectiveC
import Swift
import UIKit
public enum MuviPlayerPlaybackError {
  case unknown
  case notFound
  case unauthorized
  case authenticationError
  case forbidden
  case unavailable
  case mediaFileError
  case bandwidthExceeded
  case playlistUnchanged
  case decoderMalfunction
  case decoderTemporarilyUnavailable
  case wrongHostIP
  case wrongHostDNS
  case badURL
  case invalidRequest
  public static func == (a: MuviPlayer.MuviPlayerPlaybackError, b: MuviPlayer.MuviPlayerPlaybackError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class MSPopOverMenuConfiguration : ObjectiveC.NSObject {
  public var menuRowHeight: CoreGraphics.CGFloat
  public var menuWidth: CoreGraphics.CGFloat
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreGraphics.CGFloat
  public var backgoundTintColor: UIKit.UIColor
  public var cornerRadius: CoreGraphics.CGFloat
  public var menuSeparatorColor: UIKit.UIColor
  public var menuSeparatorInset: UIKit.UIEdgeInsets
  public var cellSelectionStyle: UIKit.UITableViewCell.SelectionStyle
  public var globalShadow: Swift.Bool
  public var shadowAlpha: CoreGraphics.CGFloat
  public var localShadow: Swift.Bool
  public var textColor: UIKit.UIColor
  public var textFont: UIKit.UIFont
  public var textAlignment: UIKit.NSTextAlignment
  public var ignoreImageOriginalColor: Swift.Bool
  public var menuIconSize: CoreGraphics.CGFloat
  public var selectedTextColor: UIKit.UIColor
  public var selectedCellBackgroundColor: UIKit.UIColor
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class MuviVideoPlayer : AVFoundation.AVPlayer, AVFoundation.AVAssetResourceLoaderDelegate {
  weak public var handler: MuviPlayer.MuviPlayerView!
  public var isBuffering: Swift.Bool
  @objc deinit
  @objc override dynamic open func play()
  open func replay(seekTime: CoreMedia.CMTime, playerState: MuviPlayer.MuviPlayerState)
  @objc override dynamic open func pause()
  @objc override dynamic open func replaceCurrentItem(with item: AVFoundation.AVPlayerItem?)
  @objc override dynamic public init(url URL: Foundation.URL)
  @objc override dynamic public init(playerItem item: AVFoundation.AVPlayerItem?)
  @objc override dynamic public init()
}
extension MuviVideoPlayer {
  open func startTime() -> CoreMedia.CMTime
  open func endTime() -> CoreMedia.CMTime
  open func preparePlayerPlaybackDelegate()
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForRenewalOfRequestedResource renewalRequest: AVFoundation.AVAssetResourceRenewalRequest) -> Swift.Bool
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource loadingRequest: AVFoundation.AVAssetResourceLoadingRequest) -> Swift.Bool
}
extension MSPopOverMenu {
  public static func showForSender(sender: UIKit.UIView, with menuArray: [MuviPlayer.MSMenuObject], menuImageArray: [MuviPlayer.Imageable]? = nil, popOverPosition: MuviPlayer.MSPopOverPosition = .automatic, config: MuviPlayer.MSPopOverMenuConfiguration? = nil, done: @escaping (ObjectiveC.NSInteger) -> Swift.Void, cancel: (() -> Swift.Void)? = nil)
  public static func showForEvent(event: UIKit.UIEvent, with menuArray: [MuviPlayer.MSMenuObject], menuImageArray: [MuviPlayer.Imageable]? = nil, popOverPosition: MuviPlayer.MSPopOverPosition = .automatic, config: MuviPlayer.MSPopOverMenuConfiguration? = nil, done: @escaping (ObjectiveC.NSInteger) -> Swift.Void, cancel: (() -> Swift.Void)? = nil)
  public static func showFromSenderFrame(senderFrame: CoreGraphics.CGRect, with menuArray: [MuviPlayer.MSMenuObject], menuImageArray: [MuviPlayer.Imageable]? = nil, popOverPosition: MuviPlayer.MSPopOverPosition = .automatic, config: MuviPlayer.MSPopOverMenuConfiguration? = nil, done: @escaping (ObjectiveC.NSInteger) -> Swift.Void, cancel: (() -> Swift.Void)? = nil)
}
public enum MSPopOverPosition {
  case automatic
  case alwaysAboveSender
  case alwaysUnderSender
  public static func == (a: MuviPlayer.MSPopOverPosition, b: MuviPlayer.MSPopOverPosition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class MSPopOverMenu : ObjectiveC.NSObject {
  public func showForSender(sender: UIKit.UIView?, or senderFrame: CoreGraphics.CGRect?, with menuNameArray: [MuviPlayer.MSMenuObject]!, menuImageArray: [MuviPlayer.Imageable]? = nil, popOverPosition: MuviPlayer.MSPopOverPosition = .automatic, config: MuviPlayer.MSPopOverMenuConfiguration? = nil, done: @escaping (ObjectiveC.NSInteger) -> Swift.Void, cancel: (() -> Swift.Void)? = nil)
  public func dismiss()
  @objc deinit
  @objc override dynamic public init()
}
extension MSPopOverMenu : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
public protocol Imageable {
  func getImage() -> UIKit.UIImage?
}
extension String : MuviPlayer.Imageable {
  public func getImage() -> UIKit.UIImage?
}
extension UIImage : MuviPlayer.Imageable {
  public func getImage() -> UIKit.UIImage?
}
public protocol MSMenuObject {
}
extension String : MuviPlayer.MSMenuObject {
}
extension MSPopOverMenuModel : MuviPlayer.MSMenuObject {
}
extension UIScreen {
  public static func pop_width() -> CoreGraphics.CGFloat
  public static func pop_height() -> CoreGraphics.CGFloat
}
@objc @_inheritsConvenienceInitializers public class MuviTimeLabel : UIKit.UILabel {
  open func update(toTime: Foundation.TimeInterval)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct MuviPlayerMediaTrack {
  public var option: AVFoundation.AVMediaSelectionOption
  public var group: AVFoundation.AVMediaSelectionGroup
  public var name: Swift.String
  public var language: Swift.String
  public var isSelected: Swift.Bool
  public func select(for player: MuviPlayer.MuviVideoPlayer)
}
public protocol MuviPlayerPlaybackDelegate : AnyObject {
  func timeDidChange(player: MuviPlayer.MuviVideoPlayer, to time: CoreMedia.CMTime)
  func playbackShouldBegin(player: MuviPlayer.MuviVideoPlayer) -> Swift.Bool
  func playbackDidJump(player: MuviPlayer.MuviVideoPlayer)
  func playbackWillBegin(player: MuviPlayer.MuviVideoPlayer)
  func playbackReady(player: MuviPlayer.MuviVideoPlayer)
  func playbackDidBegin(player: MuviPlayer.MuviVideoPlayer, seekTime: CoreMedia.CMTime)
  func playbackDidBegin(player: MuviPlayer.MuviVideoPlayer)
  func playbackDidEnd(player: MuviPlayer.MuviVideoPlayer, notification: Foundation.Notification)
  func startBuffering(player: MuviPlayer.MuviVideoPlayer)
  func endBuffering(player: MuviPlayer.MuviVideoPlayer)
  func playbackDidFailed(with error: MuviPlayer.MuviPlayerPlaybackError)
  func playbackWillPause(player: MuviPlayer.MuviVideoPlayer)
  func playbackDidPause(player: MuviPlayer.MuviVideoPlayer)
  func playbackItemReady(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func backButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func subtitleButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func resolutionButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func nextButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func previousButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func fullscreenButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func fullscreenPIPAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func seekingDidStart(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func seekingDidEnd(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func multiAudioButton(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  func muviplayerAuthentication(code: Swift.Int, message: Swift.String)
  func pollingCardButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
}
extension MuviPlayerPlaybackDelegate {
  public func timeDidChange(player: MuviPlayer.MuviVideoPlayer, to time: CoreMedia.CMTime)
  public func playbackShouldBegin(player: MuviPlayer.MuviVideoPlayer) -> Swift.Bool
  public func playbackDidJump(player: MuviPlayer.MuviVideoPlayer)
  public func playbackWillBegin(player: MuviPlayer.MuviVideoPlayer)
  public func playbackReady(player: MuviPlayer.MuviVideoPlayer)
  public func playbackDidBegin(player: MuviPlayer.MuviVideoPlayer)
  public func playbackDidEnd(player: MuviPlayer.MuviVideoPlayer, notification: Foundation.Notification)
  public func startBuffering(player: MuviPlayer.MuviVideoPlayer)
  public func endBuffering(player: MuviPlayer.MuviVideoPlayer)
  public func playbackDidFailed(with error: MuviPlayer.MuviPlayerPlaybackError)
  public func playbackWillPause(player: MuviPlayer.MuviVideoPlayer)
  public func playbackDidPause(player: MuviPlayer.MuviVideoPlayer)
  public func playbackItemReady(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  public func subtitleButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  public func resolutionButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  public func nextButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  public func previousButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  public func playbackDidBegin(player: MuviPlayer.MuviVideoPlayer, seekTime: CoreMedia.CMTime)
  public func fullscreenButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  public func fullscreenPIPAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  public func seekingDidStart(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  public func seekingDidEnd(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  public func multiAudioButton(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
  public func muviplayerAuthentication(code: Swift.Int, message: Swift.String)
  public func pollingCardButtonAction(player: MuviPlayer.MuviVideoPlayer, item: MuviPlayer.MuviPlayerItem?)
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class MuviPlayerControls : UIKit.UIView {
  weak public var handler: MuviPlayer.MuviPlayerView!
  public var behaviour: MuviPlayer.MuviPlayerControlsBehaviour!
  public var airplayButton: AVKit.AVRoutePickerView?
  @objc @IBOutlet weak public var resolutionButton: MuviPlayer.MuviStatefulButton?
  @objc @IBOutlet weak public var subtitleButton: MuviPlayer.MuviStatefulButton?
  @objc @IBOutlet weak public var multipleAudioButton: MuviPlayer.MuviStatefulButton?
  @objc @IBOutlet weak public var pollingCardButton: UIKit.UIButton!
  @objc @IBOutlet weak public var backButton: MuviPlayer.MuviStatefulButton?
  @objc @IBOutlet weak public var playPauseButton: MuviPlayer.MuviStatefulButton?
  @objc @IBOutlet weak public var fullscreenButton: MuviPlayer.MuviStatefulButton?
  @objc @IBOutlet weak public var fullscreenButtonPIP: MuviPlayer.MuviStatefulButton?
  @objc @IBOutlet weak public var pipButton: MuviPlayer.MuviStatefulButton?
  @objc @IBOutlet weak public var airplayContainer: UIKit.UIView?
  @objc @IBOutlet weak public var rewindButton: MuviPlayer.MuviStatefulButton?
  @objc @IBOutlet weak public var forwardButton: MuviPlayer.MuviStatefulButton?
  @objc @IBOutlet weak public var seekbarSlider: UIKit.UISlider?
  @objc @IBOutlet weak public var currentTimeLabel: MuviPlayer.MuviTimeLabel?
  @objc @IBOutlet weak public var totalTimeLabel: MuviPlayer.MuviTimeLabel?
  @objc @IBOutlet weak public var playBackSpeedButton: UIKit.UIButton!
  public var sliderThumbTintColor: UIKit.UIColor {
    get
    set
  }
  @objc deinit
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func didMoveToSuperview()
  public func layoutInSuperview()
  open func timeDidChange(toTime time: CoreMedia.CMTime)
  public func setSeekbarSlider(start startValue: Swift.Double, end endValue: Swift.Double, at time: Swift.Double)
  open func removeFromPlayer()
  open func prepare(isPIP: Swift.Bool)
  @objc override dynamic open func layoutSubviews()
  open func prepareNotificationListener()
  open func prepareSeekbar()
  open func showBuffering()
  open func hideBuffering()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers public class MSPopOverMenuModel : ObjectiveC.NSObject {
  public var title: Swift.String
  public var image: MuviPlayer.Imageable?
  public var selected: Swift.Bool
  convenience public init(title: Swift.String, image: MuviPlayer.Imageable?, selected: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class MuviStatefulButton : UIKit.UIButton {
  @objc @IBInspectable public var activeImage: UIKit.UIImage?
  @objc @IBInspectable public var inactiveImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  open func set(active: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class MuviPlayerItem : AVFoundation.AVPlayerItem {
  public var isEncrypted: Swift.Bool
  public var licenseURL: Swift.String
  public var audioTracks: [MuviPlayer.MuviPlayerMediaTrack] {
    get
  }
  @objc deinit
  open func setMediaTrack(track: MuviPlayer.MuviPlayerMediaTrack)
  @available(iOS 7.0, *)
  @objc override dynamic public init(asset: AVFoundation.AVAsset, automaticallyLoadedAssetKeys: [Swift.String]?)
}
extension MuviPlayerView {
  open func setWatermark(watermarkData: MuviPlayer.MuviWaterMark)
}
open class MuviWaterMark {
  open var watermarkText: Swift.String
  open var watermarkPostion: MuviPlayer.MuviWaterMarkPosition
  open var watermarkTextColor: UIKit.UIColor
  open var watermarkBackgroundColor: UIKit.UIColor
  open var watermarkFont: UIKit.UIFont
  open var watermarkPositionChangeDuration: Foundation.TimeInterval
  public init(text: Swift.String, postion: MuviPlayer.MuviWaterMarkPosition)
  @objc deinit
}
public enum MuviWaterMarkPosition {
  case dynamic
  case topLeft, topMiddle, topRight
  case middleLeft, middleMiddle, middleRight
  case bottomLeft, bottomMiddle, bottomRight
  public static func == (a: MuviPlayer.MuviWaterMarkPosition, b: MuviPlayer.MuviWaterMarkPosition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers open class MuviPlayerSDK {
  public static var authorizationToken: Swift.String
  @objc deinit
}
public enum MuviPlayerError : Swift.Error {
  case authenticationFailure(code: Swift.Int, message: Swift.String)
}
public enum MuviPlayerState {
  case play, pause
  public static func == (a: MuviPlayer.MuviPlayerState, b: MuviPlayer.MuviPlayerState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class MuviPlayerView : UIKit.UIView, AVKit.AVPictureInPictureControllerDelegate {
  public var waterMarkLabel: UIKit.UILabel
  public var bufferingLoader: UIKit.UIActivityIndicatorView
  @objc deinit
  public var extensions: [Swift.String : MuviPlayer.MuviPlayerExtension]
  public var player: MuviPlayer.MuviVideoPlayer!
  public var controls: MuviPlayer.MuviPlayerControls?
  public var useMuviPlayerControls: Swift.Bool {
    get
    set
  }
  public var useMuviPIPPlayerControls: Swift.Bool {
    get
    set
  }
  public var renderingView: MuviPlayer.MuviPlayerRenderingView!
  weak public var playbackDelegate: MuviPlayer.MuviPlayerPlaybackDelegate?
  public var parentView: UIKit.UIView?
  public var pipController: AVKit.AVPictureInPictureController?
  public var ready: Swift.Bool
  public var autoplay: Swift.Bool
  public var isPlaying: Swift.Bool
  public var isSeeking: Swift.Bool
  public var isFullscreenModeEnabled: Swift.Bool
  public var isPipModeEnabled: Swift.Bool
  public var playBackSpeedValueArray: [Swift.Float]
  public var defaultPlayBackSpeed: Swift.Float {
    get
    set
  }
  open func resetPlayBackSpeed()
  public var enablePlaybackSpeed: Swift.Bool {
    get
    set
  }
  public var isForwarding: Swift.Bool {
    get
  }
  public var isRewinding: Swift.Bool {
    get
  }
  public var subtitleShadowColor: UIKit.UIColor {
    get
    set
  }
  public var subtitleFontColor: UIKit.UIColor {
    get
    set
  }
  public var subtitleFont: UIKit.UIFont {
    get
    set
  }
  public var subtitleBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func use(controls: MuviPlayer.MuviPlayerControls)
  public func didForwardBackward(with seekDuration: Swift.Double)
  public func updateControls(toTime time: CoreMedia.CMTime)
  open func addExtension(extension ext: MuviPlayer.MuviPlayerExtension, with name: Swift.String)
  open func getExtension(with name: Swift.String) -> MuviPlayer.MuviPlayerExtension?
  open func prepare()
  open func startBuffering()
  open func stopBuffering()
  open func layout(view: UIKit.UIView, into: UIKit.UIView? = nil)
  open func setNativePip(enabled: Swift.Bool)
  open func setFullscreen(enabled: Swift.Bool)
  open func replacePlayer(item: MuviPlayer.MuviPlayerItem?, playerState: MuviPlayer.MuviPlayerState = .play, time: CoreMedia.CMTime?)
  open func set(item: MuviPlayer.MuviPlayerItem?, seekTime: CoreMedia.CMTime = CMTime.zero, playerState: MuviPlayer.MuviPlayerState = .play)
  @objc @IBAction open func play(sender: Any? = nil)
  open func replay(sender: Any? = nil, seekTime: CoreMedia.CMTime, playerState: MuviPlayer.MuviPlayerState)
  @objc @IBAction open func pause(sender: Any? = nil)
  @objc @IBAction open func togglePlayback(sender: Any? = nil)
  @objc public func pictureInPictureControllerDidStopPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc public func pictureInPictureControllerDidStartPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc public func pictureInPictureControllerWillStopPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc public func pictureInPictureControllerWillStartPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc public func pictureInPictureController(_ pictureInPictureController: AVKit.AVPictureInPictureController, failedToStartPictureInPictureWithError error: Swift.Error)
  @objc public func pictureInPictureController(_ pictureInPictureController: AVKit.AVPictureInPictureController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
@objc open class MuviPlayerExtension : ObjectiveC.NSObject {
  open var player: MuviPlayer.MuviPlayerView
  public init(with player: MuviPlayer.MuviPlayerView)
  open func didAddExtension()
  open func prepare()
  @objc deinit
  @objc override dynamic public init()
}
open class MuviPlayerControlsBehaviour {
  weak public var controls: MuviPlayer.MuviPlayerControls!
  public var showingControls: Swift.Bool
  public var shouldHideControls: Swift.Bool
  public var shouldShowControls: Swift.Bool
  public var elapsedTime: Foundation.TimeInterval
  public var activationTime: Foundation.TimeInterval
  public var deactivationTimeInterval: Foundation.TimeInterval
  public var deactivationBlock: ((MuviPlayer.MuviPlayerControls) -> Swift.Void)?
  public var activationBlock: ((MuviPlayer.MuviPlayerControls) -> Swift.Void)?
  @objc deinit
  public init(with controls: MuviPlayer.MuviPlayerControls)
  open func update(with time: Foundation.TimeInterval)
  open func defaultActivationBlock()
  open func defaultDeactivationBlock()
  open func hide()
  open func show()
}
@objc open class MuviPlayerRenderingView : UIKit.UIView {
  @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  public var playerLayer: AVFoundation.AVPlayerLayer {
    get
  }
  weak public var player: MuviPlayer.MuviPlayerView!
  @objc deinit
  public init(with player: MuviPlayer.MuviPlayerView)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@objc public class MuviSubtitles : ObjectiveC.NSObject {
  public init(file filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8)
  @objc public init(subtitles string: Swift.String)
  @objc public func searchSubtitles(at time: Foundation.TimeInterval) -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
extension MuviPlayerView {
  public var subtitleLabel: UIKit.UILabel? {
    get
    set(value)
  }
  public func addSubtitles(fileFromRemote filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8)
  public func addSubtitles(fileFromLocal filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8)
  public func removeSubtitles()
}
extension MuviPlayer.MuviPlayerPlaybackError : Swift.Equatable {}
extension MuviPlayer.MuviPlayerPlaybackError : Swift.Hashable {}
extension MuviPlayer.MSPopOverPosition : Swift.Equatable {}
extension MuviPlayer.MSPopOverPosition : Swift.Hashable {}
extension MuviPlayer.MuviWaterMarkPosition : Swift.Equatable {}
extension MuviPlayer.MuviWaterMarkPosition : Swift.Hashable {}
extension MuviPlayer.MuviPlayerState : Swift.Equatable {}
extension MuviPlayer.MuviPlayerState : Swift.Hashable {}
